Subject: [PATCH] New sec config
---
Index: src/main/java/io/prozy/myfinance/rest/TransactionRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/io/prozy/myfinance/rest/TransactionRestController.java b/src/main/java/io/prozy/myfinance/rest/TransactionRestController.java
--- a/src/main/java/io/prozy/myfinance/rest/TransactionRestController.java	(revision a3c4186b70eb633382a468f4f159634cc46cbc9b)
+++ b/src/main/java/io/prozy/myfinance/rest/TransactionRestController.java	(date 1745227314752)
@@ -3,29 +3,44 @@
 import io.prozy.myfinance.dto.TransactionDto;
 import io.prozy.myfinance.service.TransactionService;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.web.bind.annotation.*;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
 
 import java.time.LocalDateTime;
 import java.util.List;
+import java.util.Objects;
 
 @RestController
 @RequestMapping("/api/v1/transactions")
 public class TransactionRestController {
 
-  private final TransactionService transactionService;
+    private final TransactionService transactionService;
 
-  @Autowired
-  public TransactionRestController(TransactionService transactionService) {
-    this.transactionService = transactionService;
-  }
+    @Autowired
+    public TransactionRestController(TransactionService transactionService) {
+        this.transactionService = transactionService;
+    }
 
-  @GetMapping("/search")
-  public List<TransactionDto> searchTransactions(
-      @RequestParam(required = false) Double minAmount,
-      @RequestParam(required = false) Double maxAmount,
-      @RequestParam(required = false) LocalDateTime startDate,
-      @RequestParam(required = false) LocalDateTime endDate,
-      @RequestParam(required = false) String category) {
-    return transactionService.getTransactions(minAmount, maxAmount, startDate, endDate, category);
-  }
+    @GetMapping("/search")
+    public List<TransactionDto> searchTransactions(
+            @RequestParam(required = false) Double minAmount,
+            @RequestParam(required = false) Double maxAmount,
+            @RequestParam(required = false) LocalDateTime startDate,
+            @RequestParam(required = false) LocalDateTime endDate,
+            @RequestParam(required = false) String category) {
+        return transactionService.getTransactions(minAmount, maxAmount, startDate, endDate, category);
+    }
+
+    @GetMapping("/")
+    public ResponseEntity<?> getAll() {
+        List<TransactionDto> all = transactionService.getAll();
+
+        if (Objects.nonNull(all)) {
+            return ResponseEntity.ok(all);
+        }
+        return ResponseEntity.status(404).build();
+    }
 }
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
--- a/src/main/resources/application.yml	(revision a3c4186b70eb633382a468f4f159634cc46cbc9b)
+++ b/src/main/resources/application.yml	(date 1745190829492)
@@ -15,5 +15,5 @@
 server:
   port: 8089
 jwt:
-  secret: your_super_secret_key
+  secret: yourSecureLongRandomBase64EncodedKeyWithoutUnderScore
   expiration: 86400000 
Index: src/main/java/io/prozy/myfinance/security/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/io/prozy/myfinance/security/SecurityConfig.java b/src/main/java/io/prozy/myfinance/security/SecurityConfig.java
--- a/src/main/java/io/prozy/myfinance/security/SecurityConfig.java	(revision a3c4186b70eb633382a468f4f159634cc46cbc9b)
+++ b/src/main/java/io/prozy/myfinance/security/SecurityConfig.java	(date 1745226372357)
@@ -1,19 +1,23 @@
 package io.prozy.myfinance.security;
 
-import org.springframework.context.annotation.*;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
 import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
-import org.springframework.security.config.annotation.web.builders.*;
-import org.springframework.security.config.http.SessionCreationPolicy;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.security.web.*;
+import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-import io.prozy.myfinance.security.JwtAuthenticationFilter;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+import org.springframework.web.cors.CorsConfiguration;
+
+import java.util.List;
+
+import static org.springframework.security.config.http.SessionCreationPolicy.STATELESS;
 
 @Configuration
 @EnableWebSecurity
@@ -25,17 +29,24 @@
 
     @Bean
     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
-        http
-            .csrf().disable()
-            .authorizeHttpRequests()
-                .requestMatchers("/api/v1/auth/**").permitAll()
-                .anyRequest().authenticated()
-            .and()
-            .sessionManagement()
-                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
-            .and()
-            .authenticationProvider(authenticationProvider())
-            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
+        http.cors(cors -> cors.configurationSource(request -> {
+                    var corsConfiguration = new CorsConfiguration();
+                    corsConfiguration.setAllowedOriginPatterns(List.of("http://localhost:3000"));
+                    corsConfiguration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
+                    corsConfiguration.setAllowedHeaders(List.of("*"));
+                    corsConfiguration.setAllowCredentials(true);
+                    return corsConfiguration;
+                }))
+                .csrf(AbstractHttpConfigurer::disable)
+                .authorizeHttpRequests(request -> request
+                        .requestMatchers("/api/v1/auth/**").permitAll()
+                        .requestMatchers("/api/v1/transactions/**").authenticated()
+                        .requestMatchers("/api/v1/categories/**").authenticated()
+                        .anyRequest().permitAll())
+                .sessionManagement(manager -> manager.sessionCreationPolicy(STATELESS))
+                .authenticationProvider(authenticationProvider())
+                .authenticationProvider(authenticationProvider())
+                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
 
         return http.build();
     }
Index: src/main/java/io/prozy/myfinance/service/TransactionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/io/prozy/myfinance/service/TransactionService.java b/src/main/java/io/prozy/myfinance/service/TransactionService.java
--- a/src/main/java/io/prozy/myfinance/service/TransactionService.java	(revision a3c4186b70eb633382a468f4f159634cc46cbc9b)
+++ b/src/main/java/io/prozy/myfinance/service/TransactionService.java	(date 1745227266023)
@@ -2,12 +2,8 @@
 
 import io.prozy.myfinance.dto.TransactionDto;
 import io.prozy.myfinance.entity.TransactionEntity;
+import io.prozy.myfinance.mappers.*;
 import io.prozy.myfinance.repository.TransactionRepository;
-import io.prozy.myfinance.mappers.BankMapper;
-import io.prozy.myfinance.mappers.UserMapper;
-import io.prozy.myfinance.mappers.TransactionStatusMapper;
-import io.prozy.myfinance.mappers.TransactionTypeMapper;
-import io.prozy.myfinance.mappers.CategoryMapper;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -18,53 +14,60 @@
 @Service
 public class TransactionService {
 
-  private final TransactionRepository transactionRepository;
-  private final UserMapper userMapper;
-  private final TransactionTypeMapper transactionTypeMapper;
-  private final TransactionStatusMapper transactionStatusMapper;
-  private final CategoryMapper categoryMapper;
-  private final BankMapper bankMapper;
+    private final TransactionRepository transactionRepository;
+    private final UserMapper userMapper;
+    private final TransactionTypeMapper transactionTypeMapper;
+    private final TransactionStatusMapper transactionStatusMapper;
+    private final CategoryMapper categoryMapper;
+    private final BankMapper bankMapper;
+    private final TransactionMapper transactionMapper;
 
-  @Autowired
-  public TransactionService(TransactionRepository transactionRepository,
-      UserMapper userMapper,
-      TransactionTypeMapper transactionTypeMapper,
-      TransactionStatusMapper transactionStatusMapper,
-      CategoryMapper categoryMapper,
-      BankMapper bankMapper) {
-    this.transactionRepository = transactionRepository;
-    this.userMapper = userMapper;
-    this.transactionTypeMapper = transactionTypeMapper;
-    this.transactionStatusMapper = transactionStatusMapper;
-    this.categoryMapper = categoryMapper;
-    this.bankMapper = bankMapper;
-  }
+    @Autowired
+    public TransactionService(TransactionRepository transactionRepository,
+                              UserMapper userMapper,
+                              TransactionTypeMapper transactionTypeMapper,
+                              TransactionStatusMapper transactionStatusMapper,
+                              CategoryMapper categoryMapper,
+                              BankMapper bankMapper,
+                              TransactionMapper transactionMapper) {
+        this.transactionRepository = transactionRepository;
+        this.userMapper = userMapper;
+        this.transactionTypeMapper = transactionTypeMapper;
+        this.transactionStatusMapper = transactionStatusMapper;
+        this.categoryMapper = categoryMapper;
+        this.bankMapper = bankMapper;
+        this.transactionMapper = transactionMapper;
+    }
 
-  public List<TransactionDto> getTransactions(
-      Double minAmount,
-      Double maxAmount,
-      LocalDateTime startDate,
-      LocalDateTime endDate,
-      String category) {
-    List<TransactionEntity> transactions = transactionRepository.findByFilters(
-        minAmount, maxAmount, startDate, endDate, category);
-    return transactions.stream()
-        .map(transaction -> new TransactionDto(
-            transaction.getId(),
-            userMapper.toDto(transaction.getUser()),
-            transactionTypeMapper.toDto(transaction.getTransactionType()),
-            transactionStatusMapper.toDto(transaction.getTransactionStatus()),
-            categoryMapper.toDto(transaction.getCategoryEntity()),
-            transaction.getTransactionDateTime(),
-            transaction.getComment(),
-            transaction.getAmount(),
-            bankMapper.toDto(transaction.getSenderBankEntity()),
-            bankMapper.toDto(transaction.getRecipientBankEntity()),
-            transaction.getRecipientInn(),
-            transaction.getRecipientBankAccount(),
-            transaction.getRecipientPhone(),
-            transaction.getCreatedAt(),
-            transaction.getUpdatedAt()))
-        .collect(Collectors.toList());
-  }
+    public List<TransactionDto> getTransactions(
+            Double minAmount,
+            Double maxAmount,
+            LocalDateTime startDate,
+            LocalDateTime endDate,
+            String category) {
+        List<TransactionEntity> transactions = transactionRepository.findByFilters(
+                minAmount, maxAmount, startDate, endDate, category);
+        return transactions.stream()
+                .map(transaction -> new TransactionDto(
+                        transaction.getId(),
+                        userMapper.toDto(transaction.getUser()),
+                        transactionTypeMapper.toDto(transaction.getTransactionType()),
+                        transactionStatusMapper.toDto(transaction.getTransactionStatus()),
+                        categoryMapper.toDto(transaction.getCategoryEntity()),
+                        transaction.getTransactionDateTime(),
+                        transaction.getComment(),
+                        transaction.getAmount(),
+                        bankMapper.toDto(transaction.getSenderBankEntity()),
+                        bankMapper.toDto(transaction.getRecipientBankEntity()),
+                        transaction.getRecipientInn(),
+                        transaction.getRecipientBankAccount(),
+                        transaction.getRecipientPhone(),
+                        transaction.getCreatedAt(),
+                        transaction.getUpdatedAt()))
+                .collect(Collectors.toList());
+    }
+
+    public List<TransactionDto> getAll() {
+        return transactionRepository.findAll().stream().map(transactionMapper::toDto).collect(Collectors.toList());
+    }
 }
