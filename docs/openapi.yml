openapi: 3.0.3
info:
  title: MyFinance API
  version: "1.0.0"
  description: Prozy MyFinance OpenAPI specification
servers:
  - url: http://localhost:8089/api/v1
    description: Local dev server
tags:
  - name: Auth
  - name: Users
  - name: Banks
  - name: Categories
  - name: Transactions
  - name: Dictionaries

paths:
  /auth/login:
    post:
      tags: [ Auth ]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequestDto' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponseDto' }

  /auth/register:
    post:
      tags: [ Auth ]
      summary: User registration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterRequestDto' }
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserDto' }

  /banks:
    get:
      tags: [ Banks ]
      summary: Get all banks (paged)
      parameters:
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 0 }
        - name: size
          in: query
          required: false
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Paged bank list
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items: { $ref: '#/components/schemas/BankDto' }

  /banks/generate:
    post:
      tags: [ Banks ]
      summary: Generate random banks
      parameters:
        - name: count
          in: query
          required: false
          schema: { type: integer, default: 5 }
      responses:
        '200':
          description: Generated banks
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/BankDto' }

  /categories:
    get:
      tags: [ Categories ]
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CategoryDto' }

  /categories/{id}:
    get:
      tags: [ Categories ]
      summary: Get category by ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CategoryDto' }
        '404':
          description: Not found

  /transactions:
    get:
      tags: [ Transactions ]
      summary: Get all transactions
      responses:
        '200':
          description: All transactions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionDto' }

    post:
      tags: [ Transactions ]
      summary: Create a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionDto' }
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionDto' }

    put:
      tags: [ Transactions ]
      summary: Update a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionDto' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionDto' }

  /transactions/search:
    get:
      tags: [ Transactions ]
      summary: Search transactions with filters
      parameters:
        - name: minAmount
          in: query
          schema: { type: number }
        - name: maxAmount
          in: query
          schema: { type: number }
        - name: startDate
          in: query
          schema: { type: integer }
        - name: endDate
          in: query
          schema: { type: integer }
        - name: category
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Filtered transactions
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionDto' }

  /transactions/{id}:
    get:
      tags: [ Transactions ]
      summary: Get transaction by ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Transaction
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionDto' }

    delete:
      tags: [ Transactions ]
      summary: Delete transaction
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionDto' }

  /transactions/status:
    get:
      tags: [ Dictionaries ]
      summary: Get transaction statuses
      responses:
        '200':
          description: Statuses
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionStatusDto' }

  /transactions/type:
    get:
      tags: [ Dictionaries ]
      summary: Get transaction types
      responses:
        '200':
          description: Types
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionTypeDto' }

components:
  schemas:
    LoginRequestDto:
      type: object
      required: [ login, password ]
      properties:
        login: { type: string }
        password: { type: string }

    LoginResponseDto:
      type: object
      properties:
        token: { type: string }
        uuid: { type: string, format: uuid }

    RegisterRequestDto:
      type: object
      required: [ login, password ]
      properties:
        login: { type: string }
        password: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }

    UserDto:
      type: object
      properties:
        userId: { type: string, format: uuid }
        login: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string, format: email }
        userRole: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    BankDto:
      type: object
      properties:
        bankId: { type: string, format: uuid }
        bankName: { type: string }
        bicCode: { type: string }

    CategoryDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        categoryName: { type: string }
        categoryType: { type: string }

    TransactionTypeDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }

    TransactionStatusDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        status: { type: string }

    TransactionDto:
      type: object
      properties:
        id: { type: string, format: uuid }
        user: { $ref: '#/components/schemas/UserDto' }
        transactionType: { $ref: '#/components/schemas/TransactionTypeDto' }
        transactionStatus: { $ref: '#/components/schemas/TransactionStatusDto' }
        category: { $ref: '#/components/schemas/CategoryDto' }
        transactionDateTime: { type: integer }
        comment: { type: string }
        amount: { type: number }
        senderBank: { $ref: '#/components/schemas/BankDto' }
        recipientBank: { $ref: '#/components/schemas/BankDto' }
        recipientInn: { type: string }
        recipientBankAccount: { type: string }
        recipientPhone: { type: string }
        createdAt: { type: integer }
        updatedAt: { type: integer }
